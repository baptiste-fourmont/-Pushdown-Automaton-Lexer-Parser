State 0:
input' -> . input [ # ]
-- On INPUT_SYMBOLS shift to state 1
-- On inputsymbols shift to state 7
-- On input shift to state 24
-- On declarations shift to state 25
-- On automate shift to state 62

State 1:
inputsymbols -> INPUT_SYMBOLS . COLON suitelettrenonvide [ STACK_SYMBOLS ]
-- On COLON shift to state 2

State 2:
inputsymbols -> INPUT_SYMBOLS COLON . suitelettrenonvide [ STACK_SYMBOLS ]
-- On LETTRE shift to state 3
-- On suitelettrenonvide shift to state 6

State 3:
suitelettrenonvide -> LETTRE . COMMA suitelettrenonvide [ STATES STACK_SYMBOLS INITIAL_STATE ]
suitelettrenonvide -> LETTRE . [ STATES STACK_SYMBOLS INITIAL_STATE ]
-- On COMMA shift to state 4
-- On STATES reduce production suitelettrenonvide -> LETTRE 
-- On STACK_SYMBOLS reduce production suitelettrenonvide -> LETTRE 
-- On INITIAL_STATE reduce production suitelettrenonvide -> LETTRE 

State 4:
suitelettrenonvide -> LETTRE COMMA . suitelettrenonvide [ STATES STACK_SYMBOLS INITIAL_STATE ]
-- On LETTRE shift to state 3
-- On suitelettrenonvide shift to state 5

State 5:
suitelettrenonvide -> LETTRE COMMA suitelettrenonvide . [ STATES STACK_SYMBOLS INITIAL_STATE ]
-- On STATES reduce production suitelettrenonvide -> LETTRE COMMA suitelettrenonvide 
-- On STACK_SYMBOLS reduce production suitelettrenonvide -> LETTRE COMMA suitelettrenonvide 
-- On INITIAL_STATE reduce production suitelettrenonvide -> LETTRE COMMA suitelettrenonvide 

State 6:
inputsymbols -> INPUT_SYMBOLS COLON suitelettrenonvide . [ STACK_SYMBOLS ]
-- On STACK_SYMBOLS reduce production inputsymbols -> INPUT_SYMBOLS COLON suitelettrenonvide 

State 7:
declarations -> inputsymbols . stacksymbols states initialstate initialstack [ PROGRAM ]
-- On STACK_SYMBOLS shift to state 8
-- On stacksymbols shift to state 11

State 8:
stacksymbols -> STACK_SYMBOLS . COLON suitelettrenonvide [ STATES ]
-- On COLON shift to state 9

State 9:
stacksymbols -> STACK_SYMBOLS COLON . suitelettrenonvide [ STATES ]
-- On LETTRE shift to state 3
-- On suitelettrenonvide shift to state 10

State 10:
stacksymbols -> STACK_SYMBOLS COLON suitelettrenonvide . [ STATES ]
-- On STATES reduce production stacksymbols -> STACK_SYMBOLS COLON suitelettrenonvide 

State 11:
declarations -> inputsymbols stacksymbols . states initialstate initialstack [ PROGRAM ]
-- On STATES shift to state 12
-- On states shift to state 15

State 12:
states -> STATES . COLON suitelettrenonvide [ INITIAL_STATE ]
-- On COLON shift to state 13

State 13:
states -> STATES COLON . suitelettrenonvide [ INITIAL_STATE ]
-- On LETTRE shift to state 3
-- On suitelettrenonvide shift to state 14

State 14:
states -> STATES COLON suitelettrenonvide . [ INITIAL_STATE ]
-- On INITIAL_STATE reduce production states -> STATES COLON suitelettrenonvide 

State 15:
declarations -> inputsymbols stacksymbols states . initialstate initialstack [ PROGRAM ]
-- On INITIAL_STATE shift to state 16
-- On initialstate shift to state 19

State 16:
initialstate -> INITIAL_STATE . COLON LETTRE [ INITIAL_STACK ]
-- On COLON shift to state 17

State 17:
initialstate -> INITIAL_STATE COLON . LETTRE [ INITIAL_STACK ]
-- On LETTRE shift to state 18

State 18:
initialstate -> INITIAL_STATE COLON LETTRE . [ INITIAL_STACK ]
-- On INITIAL_STACK reduce production initialstate -> INITIAL_STATE COLON LETTRE 

State 19:
declarations -> inputsymbols stacksymbols states initialstate . initialstack [ PROGRAM ]
-- On INITIAL_STACK shift to state 20
-- On initialstack shift to state 23

State 20:
initialstack -> INITIAL_STACK . COLON LETTRE [ PROGRAM ]
-- On COLON shift to state 21

State 21:
initialstack -> INITIAL_STACK COLON . LETTRE [ PROGRAM ]
-- On LETTRE shift to state 22

State 22:
initialstack -> INITIAL_STACK COLON LETTRE . [ PROGRAM ]
-- On PROGRAM reduce production initialstack -> INITIAL_STACK COLON LETTRE 

State 23:
declarations -> inputsymbols stacksymbols states initialstate initialstack . [ PROGRAM ]
-- On PROGRAM reduce production declarations -> inputsymbols stacksymbols states initialstate initialstack 

State 24:
input' -> input . [ # ]
-- On # accept input

State 25:
automate -> declarations . program [ EOF ]
-- On PROGRAM shift to state 26
-- On program shift to state 61

State 26:
program -> PROGRAM . COLON expression [ EOF ]
-- On COLON shift to state 27

State 27:
program -> PROGRAM COLON . expression [ EOF ]
-- On REJECT shift to state 28
-- On PUSH shift to state 29
-- On POP shift to state 31
-- On CHANGE shift to state 32
-- On CASE shift to state 34
-- On BEGIN shift to state 39
-- On instruction shift to state 40
-- On expression shift to state 60

State 28:
instruction -> REJECT . [ LETTRE EOF END ]
-- On LETTRE reduce production instruction -> REJECT 
-- On EOF reduce production instruction -> REJECT 
-- On END reduce production instruction -> REJECT 

State 29:
instruction -> PUSH . LETTRE [ LETTRE EOF END ]
-- On LETTRE shift to state 30

State 30:
instruction -> PUSH LETTRE . [ LETTRE EOF END ]
-- On LETTRE reduce production instruction -> PUSH LETTRE 
-- On EOF reduce production instruction -> PUSH LETTRE 
-- On END reduce production instruction -> PUSH LETTRE 

State 31:
instruction -> POP . [ LETTRE EOF END ]
-- On LETTRE reduce production instruction -> POP 
-- On EOF reduce production instruction -> POP 
-- On END reduce production instruction -> POP 

State 32:
instruction -> CHANGE . LETTRE [ LETTRE EOF END ]
-- On LETTRE shift to state 33

State 33:
instruction -> CHANGE LETTRE . [ LETTRE EOF END ]
-- On LETTRE reduce production instruction -> CHANGE LETTRE 
-- On EOF reduce production instruction -> CHANGE LETTRE 
-- On END reduce production instruction -> CHANGE LETTRE 

State 34:
expression -> CASE . STATE OF casestate [ EOF END ]
expression -> CASE . NEXT OF casenext [ EOF END ]
expression -> CASE . TOP OF casetop [ EOF END ]
-- On TOP shift to state 35
-- On STATE shift to state 46
-- On NEXT shift to state 53

State 35:
expression -> CASE TOP . OF casetop [ EOF END ]
-- On OF shift to state 36

State 36:
expression -> CASE TOP OF . casetop [ EOF END ]
-- On LETTRE shift to state 37
-- On casetop shift to state 45
-- On EOF reduce production casetop -> 
-- On END reduce production casetop -> 

State 37:
casetop -> LETTRE . COLON instruction casetop [ EOF END ]
-- On COLON shift to state 38

State 38:
casetop -> LETTRE COLON . instruction casetop [ EOF END ]
-- On REJECT shift to state 28
-- On PUSH shift to state 29
-- On POP shift to state 31
-- On CHANGE shift to state 32
-- On BEGIN shift to state 39
-- On instruction shift to state 43

State 39:
instruction -> BEGIN . expression END [ LETTRE EOF END ]
-- On REJECT shift to state 28
-- On PUSH shift to state 29
-- On POP shift to state 31
-- On CHANGE shift to state 32
-- On CASE shift to state 34
-- On BEGIN shift to state 39
-- On instruction shift to state 40
-- On expression shift to state 41

State 40:
expression -> instruction . [ EOF END ]
-- On EOF reduce production expression -> instruction 
-- On END reduce production expression -> instruction 

State 41:
instruction -> BEGIN expression . END [ LETTRE EOF END ]
-- On END shift to state 42

State 42:
instruction -> BEGIN expression END . [ LETTRE EOF END ]
-- On LETTRE reduce production instruction -> BEGIN expression END 
-- On EOF reduce production instruction -> BEGIN expression END 
-- On END reduce production instruction -> BEGIN expression END 

State 43:
casetop -> LETTRE COLON instruction . casetop [ EOF END ]
-- On LETTRE shift to state 37
-- On casetop shift to state 44
-- On EOF reduce production casetop -> 
-- On END reduce production casetop -> 

State 44:
casetop -> LETTRE COLON instruction casetop . [ EOF END ]
-- On EOF reduce production casetop -> LETTRE COLON instruction casetop 
-- On END reduce production casetop -> LETTRE COLON instruction casetop 

State 45:
expression -> CASE TOP OF casetop . [ EOF END ]
-- On EOF reduce production expression -> CASE TOP OF casetop 
-- On END reduce production expression -> CASE TOP OF casetop 

State 46:
expression -> CASE STATE . OF casestate [ EOF END ]
-- On OF shift to state 47

State 47:
expression -> CASE STATE OF . casestate [ EOF END ]
-- On LETTRE shift to state 48
-- On casestate shift to state 52
-- On EOF reduce production casestate -> 
-- On END reduce production casestate -> 

State 48:
casestate -> LETTRE . COLON instruction casestate [ EOF END ]
-- On COLON shift to state 49

State 49:
casestate -> LETTRE COLON . instruction casestate [ EOF END ]
-- On REJECT shift to state 28
-- On PUSH shift to state 29
-- On POP shift to state 31
-- On CHANGE shift to state 32
-- On BEGIN shift to state 39
-- On instruction shift to state 50

State 50:
casestate -> LETTRE COLON instruction . casestate [ EOF END ]
-- On LETTRE shift to state 48
-- On casestate shift to state 51
-- On EOF reduce production casestate -> 
-- On END reduce production casestate -> 

State 51:
casestate -> LETTRE COLON instruction casestate . [ EOF END ]
-- On EOF reduce production casestate -> LETTRE COLON instruction casestate 
-- On END reduce production casestate -> LETTRE COLON instruction casestate 

State 52:
expression -> CASE STATE OF casestate . [ EOF END ]
-- On EOF reduce production expression -> CASE STATE OF casestate 
-- On END reduce production expression -> CASE STATE OF casestate 

State 53:
expression -> CASE NEXT . OF casenext [ EOF END ]
-- On OF shift to state 54

State 54:
expression -> CASE NEXT OF . casenext [ EOF END ]
-- On LETTRE shift to state 55
-- On casenext shift to state 59
-- On EOF reduce production casenext -> 
-- On END reduce production casenext -> 

State 55:
casenext -> LETTRE . COLON instruction casenext [ EOF END ]
-- On COLON shift to state 56

State 56:
casenext -> LETTRE COLON . instruction casenext [ EOF END ]
-- On REJECT shift to state 28
-- On PUSH shift to state 29
-- On POP shift to state 31
-- On CHANGE shift to state 32
-- On BEGIN shift to state 39
-- On instruction shift to state 57

State 57:
casenext -> LETTRE COLON instruction . casenext [ EOF END ]
-- On LETTRE shift to state 55
-- On casenext shift to state 58
-- On EOF reduce production casenext -> 
-- On END reduce production casenext -> 

State 58:
casenext -> LETTRE COLON instruction casenext . [ EOF END ]
-- On EOF reduce production casenext -> LETTRE COLON instruction casenext 
-- On END reduce production casenext -> LETTRE COLON instruction casenext 

State 59:
expression -> CASE NEXT OF casenext . [ EOF END ]
-- On EOF reduce production expression -> CASE NEXT OF casenext 
-- On END reduce production expression -> CASE NEXT OF casenext 

State 60:
program -> PROGRAM COLON expression . [ EOF ]
-- On EOF reduce production program -> PROGRAM COLON expression 

State 61:
automate -> declarations program . [ EOF ]
-- On EOF reduce production automate -> declarations program 

State 62:
input -> automate . EOF [ # ]
-- On EOF shift to state 63

State 63:
input -> automate EOF . [ # ]
-- On # reduce production input -> automate EOF 

